name: Release APK

on:
  push:
    tags:
      - 'v*'          # 推送以 v 开头的标签时触发
  workflow_dispatch:   # 支持手动触发

jobs:
  build_apk:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      # 1. 检出当前仓库源码
      - name: Checkout source
        uses: actions/checkout@v3

      # 2. 配置 JDK 11（按需改成你项目需要的版本）
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. 赋予 Gradle 可执行权限（Linux  runner 需要）
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 3. 导入签名密钥
      - name: Decode signing key
        run: |
          echo "${{ secrets.SIGNING_KEYSTORE_B64 }}" | base64 -d > release.keystore
          echo "RELEASE_STORE_FILE=${{ github.workspace }}/release.keystore" >> $GITHUB_ENV
          echo "RELEASE_KEY_ALIAS=${{ secrets.SIGNING_ALIAS }}" >> $GITHUB_ENV
          echo "RELEASE_STORE_PASSWORD=${{ secrets.SIGNING_STORE_PWD }}" >> $GITHUB_ENV
          echo "RELEASE_KEY_PASSWORD=${{ secrets.SIGNING_KEY_PWD }}" >> $GITHUB_ENV

      # 4. 编译 Release APK（签名已自动生效）
      - name: Build Release APK
        run: ./gradlew assembleRelease

      # ----------------------------------------------------------
      #  根据 build.gradle.kts 生成的文件名定位 APK
      # ----------------------------------------------------------
      - name: Locate APK
        id: apk
        run: |
          # 文件名格式：mytv-android-tv-<ver>-<abi>-sdk<minSdk>.apk
          apk_path=$(find tv/build/outputs/apk/release -name 'mytv-android-tv-*.apk' | head -n1)
          [ -z "$apk_path" ] && { echo "❌ APK not found"; exit 1; }
          echo "apk_path=$apk_path" >> $GITHUB_OUTPUT

      # ----------------------------------------------------------
      #  0. 先拿到或创建 Release，保证 upload_url 存在
      # ----------------------------------------------------------
      - name: Create/Find Release
        id: release
        shell: bash
        run: |
          tag="${GITHUB_REF#refs/tags/}"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            resp=$(curl -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/releases \
              -d "{
                \"tag_name\": \"$tag\",
                \"name\": \"$tag\",
                \"draft\": false,
                \"prerelease\": false
              }")
          else
            resp=$(curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/releases/tags/$tag)
          fi
          upload_url=$(echo "$resp" | jq -r .upload_url | sed 's/{.*}//')
          # 若仍为空则主动失败
          [[ -z "$upload_url" || "$upload_url" == "null" ]] && { echo "❌ Failed to get upload_url"; exit 1; }
          echo "upload_url=$upload_url" >> $GITHUB_OUTPUT
          echo "tag_name=$tag" >> $GITHUB_OUTPUT

      # ----------------------------------------------------------
      #  1. 再定位 APK
      # ----------------------------------------------------------
      - name: Locate APK
        id: apk
        run: |
          apk_path=$(find tv/build/outputs/apk/release -name 'mytv-android-tv-*.apk' | head -n1)
          [ -z "$apk_path" ] && { echo "❌ APK not found"; exit 1; }
          echo "apk_path=$apk_path" >> $GITHUB_OUTPUT

      # 5. 上传 APK 到 Release
      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}   # 必须来自同 job 的 steps.release
          asset_path: ${{ steps.apk.outputs.apk_path }}
          asset_name: app-release-${{ steps.release.outputs.tag_name }}.apk
          asset_content_type: application/vnd.android.package-archive

  update_json:
    needs: build_apk          # 等待 build_apk 完成
    runs-on: ubuntu-latest
    steps:
      # 以下保持你原来的 JSON 更新逻辑即可
      - name: Checkout the repository with the JSON file
        uses: actions/checkout@v2
        with:
          repository: minyoad/mytv-android-update
          token: ${{ secrets.GITHUB_TOKEN }}
          path: json-repo

      - name: Get release information
        id: get_release_info
        run: |
          echo "RELEASE_TAG=${{ needs.build_apk.outputs.tag_name }}" >> $GITHUB_ENV
          echo "APK_URL=https://github.com/${{ github.repository }}/releases/download/${{ needs.build_apk.outputs.tag_name }}/app-release-${{ needs.build_apk.outputs.tag_name }}.apk" >> $GITHUB_ENV
          echo "RELEASE_BODY=" >> $GITHUB_ENV   # 手动触发时暂无 body，留空即可
          BODY_ESCAPED=$(echo "$BODY" | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "RELEASE_BODY=$BODY_ESCAPED" >> $GITHUB_ENV

      - name: Update JSON file
        run: |
          JSON_FILE=json-repo/tv-stable.json
          jq --arg tag "$RELEASE_TAG" \
             --arg url "$APK_URL" \
             --arg body "$RELEASE_BODY" \
             '{
               tag_name: $tag,
               assets: [{ browser_download_url: $url }],
               body: $body
             }' \
             $JSON_FILE > tmp.json && mv tmp.json $JSON_FILE

      - name: Commit and push changes
        run: |
          cd json-repo
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add tv-stable.json
          git commit -m "Update release information for ${RELEASE_TAG}"
          git push



